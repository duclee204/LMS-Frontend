import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient, HttpParams } from '@angular/common/http';
import { SidebarComponent } from '../../components/sidebar/sidebar.component';
import { CategoryService } from '../../services/category.service';

@Component({
  standalone: true,
  selector: 'app-category',
  templateUrl: './category.component.html',
  styleUrls: ['./category.component.scss'],
  imports: [CommonModule, FormsModule, SidebarComponent]
})
export class CategoryComponent implements OnInit {
  searchName: string = '';
  searchDescription: string = '';
  categories: any[] = [];

  showCreateForm = false;
  isEditing = false;
  editId: number | null = null;

  newCategory = {
    name: '',
    description: ''
  };

  constructor(
    private http: HttpClient,
    private categoryService: CategoryService
  ) {}

  ngOnInit(): void {
    // ‚úÖ Debug: Ki·ªÉm tra token
    if (typeof window !== 'undefined') {
      const token = localStorage.getItem('token');
      console.log('üîç Category - Token hi·ªán t·∫°i:', token);
      
      if (!token) {
        console.log('‚ùå Category - Kh√¥ng c√≥ token - c·∫ßn ƒëƒÉng nh·∫≠p');
      } else {
        console.log('‚úÖ Category - C√≥ token - ti·∫øp t·ª•c load data');
      }
    }
    
    this.fetchCategories();
  }

  fetchCategories(): void {
    let params = new HttpParams();
    if (this.searchName) {
      params = params.set('name', this.searchName);
    }
    if (this.searchDescription) {
      params = params.set('description', this.searchDescription);
    }

    this.http.get<any[]>('http://localhost:8080/api/categories/list', {
      params
    }).subscribe({
      next: (data) => this.categories = data,
      error: (err) => console.error('Error fetching categories', err)
    });
  }

  // üëâ G·ªçi khi ·∫•n n√∫t "Ch·ªânh s·ª≠a"
  editCategory(category: any): void {
    this.newCategory = { name: category.name, description: category.description };
    this.editId = category.categoryId;
    this.isEditing = true;
    this.showCreateForm = true;
  }

  // üëâ G·ªçi khi ·∫•n "L∆∞u" ho·∫∑c "C·∫≠p nh·∫≠t"
  submitCategory(): void {
    if (this.isEditing && this.editId !== null) {
      // PUT: c·∫≠p nh·∫≠t danh m·ª•c
      this.http.put(`http://localhost:8080/api/categories/${this.editId}`, this.newCategory, {
        responseType: 'text'
      }).subscribe({
        next: (res) => {
          alert(res);
          this.resetForm();
          this.fetchCategories();
        },
        error: (err) => {
          alert('C·∫≠p nh·∫≠t danh m·ª•c th·∫•t b·∫°i');
          console.error(err);
        }
      });
    } else {
      // POST: t·∫°o m·ªõi danh m·ª•c
      this.http.post('http://localhost:8080/api/categories', this.newCategory, {
        responseType: 'text'
      }).subscribe({
        next: (res) => {
          alert(res);
          this.resetForm();
          this.fetchCategories();
        },
        error: (err) => {
          alert('T·∫°o danh m·ª•c th·∫•t b·∫°i');
          console.error(err);
        }
      });
    }
  }
deleteCategory(): void {
  if (this.editId === null) {
    alert('Kh√¥ng t√¨m th·∫•y ID danh m·ª•c ƒë·ªÉ x√≥a.');
    return;
  }

  if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y?')) {
    this.http.delete(`http://localhost:8080/api/categories/${this.editId}`, { responseType: 'text' })
      .subscribe({
        next: (res) => {
          alert(res);
          this.fetchCategories();
          this.cancelCreate();
        },
        error: (err) => {
          console.error('L·ªói khi x√≥a:', err);
          alert('X√≥a th·∫•t b·∫°i.');
        }
      });
  }
}
  cancelCreate(): void {
    this.resetForm();
  }

  resetForm(): void {
    this.newCategory = { name: '', description: '' };
    this.isEditing = false;
    this.editId = null;
    this.showCreateForm = false;
  }
}
